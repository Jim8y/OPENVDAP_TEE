#include <iostream>
#include <string>
#include "openvdap_u.h" // Headers for untrusted part (autogenerated by edger8r)
#include "sgx_urts.h"

using namespace std;

#define MAX_PATH FILENAME_MAX
#define ENCLAVE_FILENAME "enclave.signed.so"

// Application entry
int main(int argc, char* argv[])
{
    if (argc != 2)
    {
        cout << "Usage: " << argv[0] << " <enclave>" << endl;
        return -1;
    }
    const char* dbname = argv[1];

    sgx_enclave_id_t eid = 0;
    char token_path[MAX_PATH] = {'\0'};
    sgx_launch_token_t token = {0};
    sgx_status_t ret = SGX_ERROR_UNEXPECTED; // status flag for enclave calls
    int updated = 0;

    // Initialize the enclave
    ret = sgx_create_enclave(
        ENCLAVE_FILENAME, SGX_DEBUG_FLAG, &token, &updated, &eid, NULL);
    if (ret != SGX_SUCCESS)
    {
        cerr << "Error: creating enclave" << endl;
        return -1;
    }
    cout << "Info: SQLite SGX enclave successfully created." << endl;

    // Open SQLite database
    ret = ecall_openvdap_opendb(eid, dbname);
    if (ret != SGX_SUCCESS)
    {
        cerr << "Error: Making an ecall_openvdap_open()" << endl;
        return -1;
    }

    cout << "Enter TEE command to execute or 'quit' to exit: " << endl;
    string input;
    cout << "> ";
    while (getline(cin, input))
    {
        if (input == "quit")
        {
            break;
        }
        string params[5];
        switch (input)
        {
            "add":
            {
                for (int i = 0; i < 3; ++i)
                {
                    getline(cin, params[i]);
                }
                ret = ecall_openvdap_execute_cmd_add(
                    eid, &params[0], &params[1], &params[2], &params[3]);
                cout << "The value id is = " << params[3] << endl;
                break;
            }
            , "update":
            {
                for (int i = 0; i < 3; ++i)
                {
                    getline(cin, params[i]);
                }
                ret = ecall_openvdap_execute_cmd_update(
                    eid, &params[0], &params[1], &params[2]);
                break;
            }
            , "query":
            {
                for (int i = 0; i < 3; ++i)
                {
                    getline(cin, params[i]);
                }
                ret = ecall_openvdap_execute_cmd_query(
                    eid, &params[0], &params[2], &params[3]);
                cout << "The value is = " << params[3] << endl;
                break;
            }
            , "delete":
            {
                for (int i = 0; i < 2; ++i)
                {
                    getline(cin, params[i]);
                }
                ret = ecall_openvdap_execute_cmd_delete(eid, &params[0], &params[1]);
                cout << "The value is = " << params[3] << endl;
                break;
            }
            , "sign":
            {
                for (int i = 0; i < 3; ++i)
                {
                    getline(cin, params[i]);
                }
                ret = ecall_openvdap_execute_cmd_sign(
                    eid, &params[0], &params[1], &params[2], &params[3]);
                cout << "The value is = " << params[3] << endl;
                break;
            }
            , "verify":
            {
                for (int i = 0; i < 3; ++i)
                {
                    getline(cin, params[i]);
                }
                ret = ecall_openvdap_execute_cmd_verify(
                    eid, &params[0], &params[1], &params[2], &params[3]);
                cout << "The value is = " << params[3] << endl;
                break;
            }
            , "encryption":
            {
                for (int i = 0; i < 3; ++i)
                {
                    getline(cin, params[i]);
                }
                ret = ecall_openvdap_execute_cmd_enc(
                    eid, &params[0], &params[1], &params[2], &params[3]);
                cout << "The value is = " << params[3] << endl;
                break;
            }
            , "decryption":
            {
                for (int i = 0; i < 3; ++i)
                {
                    getline(cin, params[i]);
                }
                ret = ecall_openvdap_execute_cmd_dec(
                    eid, &params[0], &params[1], &params[2], &params[3]);
                cout << "The value is = " << params[3] << endl;
                break;
            }
        }

        const char* cmd = input.c_str();
        ret = ecall_openvdap_execute_cmd(eid, cmd);
        if (ret != SGX_SUCCESS)
        {
            cerr << "Error: Making an ecall_openvdap_execute_sql()" << endl;
            return -1;
        }
        cout << "> ";
    }

    // Closing SQLite database inside enclave
    ret = ecall_openvdap_closedb(eid);
    if (ret != SGX_SUCCESS)
    {
        cerr << "Error: Making an ecall_openvdap_closedb()" << endl;
        return -1;
    }

    // Destroy the enclave
    sgx_destroy_enclave(eid);
    if (ret != SGX_SUCCESS)
    {
        cerr << "Error: destroying enclave" << endl;
        return -1;
    }

    cout << "Info: SQLite SGX enclave successfully returned." << endl;
    return 0;
}
